// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/VisionDrive.h"
#include <iostream>

VisionDrive::VisionDrive(Vision* vision, DriveTrain* drive) : m_vision{vision},
m_drive{drive} {
	AddRequirements(vision);
    AddRequirements(drive);
}

/**
 * @brief Called just before this Command runs the first time
 */
void VisionDrive::Initialize() {
    //m_vision->visionDrive.SetBoolean(false);
    m_vision->VisionSteerInit();
}

/**
 * @brief Called repeatedly when this Command is scheduled to run
 * 
 */
void VisionDrive::Execute() {
    frc::SmartDashboard::PutNumber("LED Code",LEDCodes::VDrive);
    
    if (m_vision->TargetIsLocked())
    {
        std::pair<double, double> result = m_vision->SteerToLockedTarget();
        m_drive->VelocityArcadeDrive(result.first, result.second);
    }
    else
    {
        m_vision->TakeSnapshot();
    }
}

/**
 * @brief Make this return true when this Command no longer needs to run execute()
 * 
 * @return true when no target is locked
 * @return false when a target is locked
 */
bool VisionDrive::IsFinished() {
    return !m_vision->TargetIsLocked();
}

/**
 * @brief Called once after isFinished returns true
 */
void VisionDrive::End(bool interrupted) {
    m_vision->VisionSteerEnd();
}
