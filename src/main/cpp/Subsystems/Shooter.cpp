// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Shooter.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() :
    kP(frc::Preferences::GetInstance()->GetDouble("Shoot kP", 0.0)),
    kFF(frc::Preferences::GetInstance()->GetDouble("Shoot kFF", 180.0e-6)),
    maxFeetPerSec(frc::Preferences::GetInstance()->GetDouble("Shoot RPM Max", 3000.0)),
    maxAccelPerSec(frc::Preferences::GetInstance()->GetDouble("Shoot Accel Max", 500.0)) {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    m_shooterEncoder.SetPositionConversionFactor(kGearRatio);

    m_shooterEncoder2.SetPositionConversionFactor(kGearRatio);

    // Set min/max power
    m_pidShooterMotor.SetOutputRange(kMinOutput, kMaxOutput);
    m_pidShooterMotor.SetSmartMotionMaxVelocity(maxFeetPerSec);
    m_pidShooterMotor.SetSmartMotionMaxAccel(maxAccelPerSec);

    m_pidShooterMotor2.SetOutputRange(kMinOutput, kMaxOutput);
    m_pidShooterMotor2.SetSmartMotionMaxVelocity(maxFeetPerSec);
    m_pidShooterMotor2.SetSmartMotionMaxAccel(maxAccelPerSec);
    
    // Set kFF and kP ( after tuning, since gains have been already been determined )
    m_pidShooterMotor.SetP(kP);
    m_pidShooterMotor.SetFF(kFF);

   // SetHoodHigh();
}

void Shooter::Periodic() {
    if (ShooterEnabled == true) {
        m_pidShooterMotor.SetReference(CommandedVelocity, rev::ControlType::kSmartVelocity);
    }
    else {
        m_pidShooterMotor.SetReference(0.0, rev::ControlType::kSmartVelocity);
    }
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Shooter::ShooterOff() {
    ShooterEnabled = false;
}

void Shooter::ShooterOn(double velocity) {
    ShooterEnabled = true;
    CommandedVelocity = velocity;
}

void Shooter::SetHoodHigh() {
    m_solHood.Set(frc::DoubleSolenoid::kForward);
}

void Shooter::SetHoodLow() {
    m_solHood.Set(frc::DoubleSolenoid::kReverse);
}

bool Shooter::IsHoodHigh() {
    bool retVal = false;
    
    if (m_solHood.Get() == frc::DoubleSolenoid::kForward) {
        retVal = true;
    }

    return retVal;
}

bool Shooter::IsHoodLow() {
    bool retVal = false;
    
    if (m_solHood.Get() == frc::DoubleSolenoid::kReverse) {
        retVal = true;
    }

    return retVal;
}

 